package com.example.travelinfo.ldbws;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.5.0.6
//
// Created by Quasar Development 
//
//---------------------------------------------------



import org.ksoap2.SoapEnvelope;
import org.ksoap2.serialization.*;
import org.kxml2.io.KXmlParser;
import org.kxml2.kdom.Element;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Vector;
import java.io.StringReader;
import java.io.StringWriter;

//If you have a compilation error here then you have to add a reference to ExKsoap2.jar to your project (you can find it in Libs folder in the generated zip file)
public class DAAExtendedSoapSerializationEnvelope extends com.easywsdl.exksoap2.serialization.ExSoapSerializationEnvelope {
    static HashMap< String,Class> classNames = new HashMap< String, Class>();
    
    static {
        classNames.put("http://thalesgroup.com/RTTI/2013-11-28/Token/types^^AccessToken",DAAAccessToken.class);
        classNames.put("http://thalesgroup.com/RTTI/2015-11-27/ldb/types^^StationBoard",DAAStationBoard.class);
        classNames.put("http://thalesgroup.com/RTTI/2015-11-27/ldb/types^^StationBoardWithDetails",DAAStationBoardWithDetails.class);
        classNames.put("http://thalesgroup.com/RTTI/2015-11-27/ldb/types^^DeparturesBoard",DAADeparturesBoard.class);
        classNames.put("http://thalesgroup.com/RTTI/2015-11-27/ldb/types^^DeparturesBoardWithDetails",DAADeparturesBoardWithDetails.class);
        classNames.put("http://thalesgroup.com/RTTI/2015-11-27/ldb/types^^ArrayOfCallingPoints",DAAArrayOfCallingPoints.class);
        classNames.put("http://thalesgroup.com/RTTI/2015-11-27/ldb/types^^BaseStationBoard",DAABaseStationBoard.class);
        classNames.put("http://thalesgroup.com/RTTI/2015-11-27/ldb/types^^BaseServiceItem",DAABaseServiceItem.class);
        classNames.put("http://thalesgroup.com/RTTI/2015-11-27/ldb/types^^ServiceItem",DAAServiceItem.class);
        classNames.put("http://thalesgroup.com/RTTI/2015-11-27/ldb/types^^ServiceItemWithCallingPoints",DAAServiceItemWithCallingPoints.class);
        classNames.put("http://thalesgroup.com/RTTI/2015-11-27/ldb/types^^DepartureItem",DAADepartureItem.class);
        classNames.put("http://thalesgroup.com/RTTI/2015-11-27/ldb/types^^DepartureItemWithCallingPoints",DAADepartureItemWithCallingPoints.class);
        classNames.put("http://thalesgroup.com/RTTI/2015-11-27/ldb/types^^ServiceLocation",DAAServiceLocation.class);
        classNames.put("http://thalesgroup.com/RTTI/2015-11-27/ldb/types^^CallingPoint",DAACallingPoint.class);
        classNames.put("http://thalesgroup.com/RTTI/2016-02-16/ldb/types^^StationBoard",DAAStationBoard_1.class);
        classNames.put("http://thalesgroup.com/RTTI/2016-02-16/ldb/types^^StationBoardWithDetails",DAAStationBoardWithDetails_1.class);
        classNames.put("http://thalesgroup.com/RTTI/2016-02-16/ldb/types^^DeparturesBoard",DAADeparturesBoard_1.class);
        classNames.put("http://thalesgroup.com/RTTI/2016-02-16/ldb/types^^DeparturesBoardWithDetails",DAADeparturesBoardWithDetails_1.class);
        classNames.put("http://thalesgroup.com/RTTI/2016-02-16/ldb/types^^BaseServiceItem",DAABaseServiceItem_1.class);
        classNames.put("http://thalesgroup.com/RTTI/2016-02-16/ldb/types^^ServiceItem",DAAServiceItem_1.class);
        classNames.put("http://thalesgroup.com/RTTI/2016-02-16/ldb/types^^ServiceItemWithCallingPoints",DAAServiceItemWithCallingPoints_1.class);
        classNames.put("http://thalesgroup.com/RTTI/2016-02-16/ldb/types^^DepartureItem",DAADepartureItem_1.class);
        classNames.put("http://thalesgroup.com/RTTI/2016-02-16/ldb/types^^DepartureItemWithCallingPoints",DAADepartureItemWithCallingPoints_1.class);
        classNames.put("http://thalesgroup.com/RTTI/2017-10-01/ldb/types^^StationBoard",DAAStationBoard_2.class);
        classNames.put("http://thalesgroup.com/RTTI/2017-10-01/ldb/types^^StationBoardWithDetails",DAAStationBoardWithDetails_2.class);
        classNames.put("http://thalesgroup.com/RTTI/2017-10-01/ldb/types^^ServiceDetails",DAAServiceDetails.class);
        classNames.put("http://thalesgroup.com/RTTI/2017-10-01/ldb/types^^DeparturesBoard",DAADeparturesBoard_2.class);
        classNames.put("http://thalesgroup.com/RTTI/2017-10-01/ldb/types^^DeparturesBoardWithDetails",DAADeparturesBoardWithDetails_2.class);
        classNames.put("http://thalesgroup.com/RTTI/2017-10-01/ldb/types^^BaseServiceDetails",DAABaseServiceDetails.class);
        classNames.put("http://thalesgroup.com/RTTI/2017-10-01/ldb/types^^ServiceItem",DAAServiceItem_2.class);
        classNames.put("http://thalesgroup.com/RTTI/2017-10-01/ldb/types^^ServiceItemWithCallingPoints",DAAServiceItemWithCallingPoints_2.class);
        classNames.put("http://thalesgroup.com/RTTI/2017-10-01/ldb/types^^DepartureItem",DAADepartureItem_2.class);
        classNames.put("http://thalesgroup.com/RTTI/2017-10-01/ldb/types^^DepartureItemWithCallingPoints",DAADepartureItemWithCallingPoints_2.class);
        classNames.put("http://thalesgroup.com/RTTI/2017-10-01/ldb/types^^CallingPoint",DAACallingPoint_1.class);
        classNames.put("http://thalesgroup.com/RTTI/2017-10-01/ldb/types^^FormationData",DAAFormationData.class);
        classNames.put("http://thalesgroup.com/RTTI/2017-10-01/ldb/types^^CoachData",DAACoachData.class);
        classNames.put("http://thalesgroup.com/RTTI/2017-10-01/ldb/types^^ArrayOfCallingPoints",DAAArrayOfCallingPoints_1.class);
        classNames.put("http://thalesgroup.com/RTTI/2012-01-13/ldb/types^^ArrayOfNRCCMessages",DAAArrayOfNRCCMessages.class);
        classNames.put("http://thalesgroup.com/RTTI/2012-01-13/ldb/types^^ArrayOfAdhocAlert",DAAArrayOfAdhocAlert.class);
        classNames.put("http://thalesgroup.com/RTTI/2015-11-27/ldb/types^^ArrayOfServiceItems",DAAArrayOfServiceItems.class);
        classNames.put("http://thalesgroup.com/RTTI/2015-11-27/ldb/types^^ArrayOfServiceItemsWithCallingPoints",DAAArrayOfServiceItemsWithCallingPoints.class);
        classNames.put("http://thalesgroup.com/RTTI/2015-11-27/ldb/types^^ArrayOfServiceLocations",DAAArrayOfServiceLocations.class);
        classNames.put("http://thalesgroup.com/RTTI/2015-11-27/ldb/types^^ArrayOfArrayOfCallingPoints",DAAArrayOfArrayOfCallingPoints.class);
        classNames.put("http://thalesgroup.com/RTTI/2015-11-27/ldb/types^^ArrayOfDepartureItems",DAAArrayOfDepartureItems.class);
        classNames.put("http://thalesgroup.com/RTTI/2015-11-27/ldb/types^^ArrayOfDepartureItemsWithCallingPoints",DAAArrayOfDepartureItemsWithCallingPoints.class);
        classNames.put("http://thalesgroup.com/RTTI/2016-02-16/ldb/types^^ArrayOfServiceItems",DAAArrayOfServiceItems_1.class);
        classNames.put("http://thalesgroup.com/RTTI/2016-02-16/ldb/types^^ArrayOfServiceItemsWithCallingPoints",DAAArrayOfServiceItemsWithCallingPoints_1.class);
        classNames.put("http://thalesgroup.com/RTTI/2016-02-16/ldb/types^^ArrayOfDepartureItems",DAAArrayOfDepartureItems_1.class);
        classNames.put("http://thalesgroup.com/RTTI/2016-02-16/ldb/types^^ArrayOfDepartureItemsWithCallingPoints",DAAArrayOfDepartureItemsWithCallingPoints_1.class);
        classNames.put("http://thalesgroup.com/RTTI/2017-10-01/ldb/types^^ArrayOfServiceItems",DAAArrayOfServiceItems_2.class);
        classNames.put("http://thalesgroup.com/RTTI/2017-10-01/ldb/types^^ArrayOfServiceItemsWithCallingPoints",DAAArrayOfServiceItemsWithCallingPoints_2.class);
        classNames.put("http://thalesgroup.com/RTTI/2017-10-01/ldb/types^^ArrayOfDepartureItems",DAAArrayOfDepartureItems_2.class);
        classNames.put("http://thalesgroup.com/RTTI/2017-10-01/ldb/types^^ArrayOfDepartureItemsWithCallingPoints",DAAArrayOfDepartureItemsWithCallingPoints_2.class);
        classNames.put("http://thalesgroup.com/RTTI/2017-10-01/ldb/types^^ArrayOfCoaches",DAAArrayOfCoaches.class);
        classNames.put("http://thalesgroup.com/RTTI/2017-10-01/ldb/types^^ArrayOfArrayOfCallingPoints",DAAArrayOfArrayOfCallingPoints_1.class);
    } 


    protected static final int QNAME_NAMESPACE = 0;
    private static final String TYPE_LABEL = "type";

    public DAAExtendedSoapSerializationEnvelope() {
        this(SoapEnvelope.VER11);
    }

    public DAAExtendedSoapSerializationEnvelope(int soapVersion) {
        super(soapVersion);
        implicitTypes = true;
        setAddAdornments(false);
        new DAAMarshalGuid().register(this);
        new MarshalFloat().register(this);
    }

    

    @Override
    protected void writeProperty(XmlSerializer writer, Object obj, PropertyInfo type) throws IOException {
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if (obj == null || obj== SoapPrimitive.NullNilElement) {
            writer.attribute(xsi, version >= VER12 ? NIL_LABEL : NULL_LABEL, "true");
            return;
        }
        if(writeReferenceObject(writer,obj))
        {
            return;
        }
        Object[] qName = getInfo(null, obj);
        if (!type.multiRef && qName[2] == null )
        {

            if (!implicitTypes || (obj.getClass() != type.type && !(obj instanceof Vector ) && type.type!=String.class  )) {
                String xmlName=DAAHelper.getKeyByValue(classNames,obj.getClass());
                if(xmlName!=null) {
                    String[] parts = xmlName.split("\\^\\^");
                    String prefix = writer.getPrefix(parts[0], true);
                    writer.attribute(xsi, TYPE_LABEL, prefix + ":" + parts[1]);
                }
                else
                {
                    if(type.type instanceof String) {
                        String xsdPrefix = writer.getPrefix(xsd, true);
                        String myType = (String) type.type;
                        String[] parts = myType.split("\\^\\^");
                        if (parts.length == 2) {
                            xsdPrefix = writer.getPrefix(parts[0], true);
                            myType = parts[1];
                        }

                        writer.attribute(xsi, TYPE_LABEL, xsdPrefix + ":" + myType);
                    }
                    else
                    {
                        String prefix = writer.getPrefix(type.namespace, true);
                        writer.attribute(xsi, TYPE_LABEL, prefix + ":" + obj.getClass().getSimpleName());
                    }

                }
            }
            //super.writeProperty(writer,obj,type);

            //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
            //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
            writeElement(writer, obj, type, qName[QNAME_MARSHAL]);
        }
        else {
            super.writeProperty(writer, obj, type);
        }
    }
    public SoapObject GetExceptionDetail(Element detailElement,String exceptionElementNS,String exceptionElementName)
    {
        int index=detailElement.indexOf(exceptionElementNS,exceptionElementName,0);
        if(index>-1)
        {
            Element errorElement=detailElement.getElement(index);
            return GetSoapObject(errorElement);
        }
        return null;
    }

    public SoapObject GetSoapObject(Element detailElement) {
        try{
            XmlSerializer xmlSerializer = XmlPullParserFactory.newInstance().newSerializer();
            StringWriter writer = new StringWriter();
            xmlSerializer.setOutput(writer);
            detailElement.write(xmlSerializer);
            xmlSerializer.flush();

            XmlPullParser xpp = new KXmlParser();
            xpp.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, true);

            xpp.setInput(new StringReader(writer.toString()));
            xpp.nextTag();
            SoapObject soapObj = new SoapObject(detailElement.getNamespace(),detailElement.getName());
            readSerializable(xpp,soapObj);
            return soapObj;
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }
        return null;
    }

    public Object GetHeader(Element detailElement) {
        if(detailElement.getChildCount()>0 && detailElement.getText(0)!=null)
        {
            SoapPrimitive primitive = new SoapPrimitive(detailElement.getNamespace(),detailElement.getName(),detailElement.getText(0));
            return  primitive;
        }
    
        return GetSoapObject(detailElement);
    }

    private Object createObject(Object soap, Class cl) throws InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {
        Object obj=cl.newInstance();
        Method ctor = obj.getClass().getMethod("loadFromSoap",Object.class,DAAExtendedSoapSerializationEnvelope.class);
        ctor.invoke(obj,soap,this);
        return obj;
    }

    public Object get(Object soap,Class cl,boolean typeFromClass)
    {
        if(soap==null)
        {
            return null;
        }
        try
        {
            if(typeFromClass)
            {
                return createObject(soap, cl);
            }
            Object refAttr=getReference(soap);
            if (refAttr != null)
            {
                return refAttr;
            }
            else
            {
                if(soap instanceof SoapObject)
                {
                    if(cl ==SoapObject.class)
                    {
                        return soap;
                    }
                    String key=String.format("%s^^%s",((SoapObject)soap).getNamespace(),((SoapObject)soap).getName());
                    if(classNames.containsKey(key))
                    {
                        cl=classNames.get(key);
                    }
                }
                return createObject(soap, cl);
            }
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
            return null;
        }
    }

    public Object getSpecificType(Object obj)
    {
        if(obj==null)
        {
            return null;
        }
        if(obj instanceof SoapObject)
        {
            SoapObject soapObject=(SoapObject)obj;
            String key=soapObject.getNamespace()+"^^"+soapObject.getName();
            if(classNames.containsKey(key))
            {
                Class cl=classNames.get(key);
                try
                {
                    return createObject(soapObject, cl);
                } 
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
        }

        return obj;
    }

    public static Object getXSDType(Object param)
    {
        if(param==null)
        {
            return null;
        }
        Class obj=param.getClass();
        if(obj.equals(String.class))
        {
            return "string";
        }
        if(obj.equals(int.class) || obj.equals(Integer.class))
        {
            return "int";
        }
        if(obj.equals(float.class) || obj.equals(Float.class))
        {
            return "float";
        }
        if(obj.equals(double.class) || obj.equals(Double.class))
        {
            return "double";
        }
        if(obj.equals(java.math.BigDecimal.class))
        {
            return "decimal";
        }
        if(obj.equals(short.class) || obj.equals(Short.class))
        {
            return "short";
        }
        if(obj.equals(long.class) || obj.equals(Long.class))
        {
            return "long";
        }
        if(obj.equals(boolean.class) || obj.equals(Boolean.class))
        {
            return "boolean";
        }
        String xmlName=DAAHelper.getKeyByValue(classNames,obj);
        if(xmlName==null)
        {
            return obj;
        }
        return xmlName;
    }
} 

